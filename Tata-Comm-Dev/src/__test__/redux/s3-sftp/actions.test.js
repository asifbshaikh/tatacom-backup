import * as actions from 'redux/s3-sftp/actions';
import {
  S3SFTP_IMPORT_SOURCE_TYPE_ADD,
  S3SFTP_IMPORT_SOURCE_TYPE_ADD_SUCCESS,
  DB_CONFIG_SAVE,
  DB_CONFIG_SAVE_SUCCESS,
  DB_CONFIG_SAVE_ERROR,
  DB_MESSAGE_CLEAN,
  DB_CONFIG_TEST,
  DB_CONFIG_TEST_SUCCESS,
  DB_CONFIG_TEST_ERROR,
  DATABASE_CONFIGURE_FORMAT_ADD_SUCCESS,
  DB_CONFIG_SHOW,
  DB_CONFIG_SHOW_SUCCESS,
  DB_CONFIG_SHOW_ERROR,
  DB_CONFIG_CLEAR_SHOW_ERROR,
  DB_CONFIG_CLEAR_TEST_ERROR,
  GET_DB_CONNECTION_LIST_SUCCESS,
  GET_DB_CONNECTION_LIST,
  DB_CONFIG_EDIT,
  DB_CONFIG_EDIT_SUCCESS,
  DB_CONFIG_EDIT_ERROR,
  DB_CONFIG_CLEAR_EDIT_ERROR,
  DB_CONNECTION_DELETE,
  DB_CONNECTION_DELETE_SUCCESS,
  DB_CONNECTION_DELETE_ERROR,
  DB_CONNECTION_DELETE_CLEAN,
  GET_DB_CONNECTION_DROPDOWN_LIST,
  GET_DB_CONNECTION_DROPDOWN_LIST_SUCCESS,
  GET_TABLE_PREVIEW,
  GET_TABLE_PREVIEW_SUCCESS,
  GET_TABLE_PREVIEW_ERROR,
  CLEAR_TABLE_PREVIEW,
  GET_IMPORT_SCHEDULER_LIST,
  GET_IMPORT_SCHEDULER_LIST_SUCCESS,
  GET_IMPORT_SCHEDULER_DETAIL,
  GET_IMPORT_SCHEDULER_DETAIL_SUCCESS,
  GET_IMPORT_SCHEDULER_DETAIL_ERROR,
  CLEAR_GET_IMPORT_SCHEDULER_DETAIL,
  DB_IMPORT_SAVE,
  SHOW_IMPORT_LIST,
  SHOW_IMPORT_LIST_SUCCESS,
  SHOW_IMPORT_LIST_ERROR,
  DELETE_IMPORT_SUCCESS,
  DELETE_IMPORT_ERROR,
  GET_IMPORT_SCHEDULER_BY_ID,
  GET_IMPORT_SCHEDULER_BY_ID_SUCCESS,
  ADD_UPDATE_S3SFTP_DB_IMPORT_SUCCESS,
  ADD_UPDATE_S3SFTP_DB_IMPORT_ERROR,
  ADD_UPDATE_S3SFTP_DB_IMPORT_ERROR_CLEAN_UP,
} from 'redux/constants';
import { describe, it, expect } from '@jest/globals';

describe('DB Import Actions', () => {
  const item = {};

  it.each([
    [actions.addS3SFTPImportSourceType, S3SFTP_IMPORT_SOURCE_TYPE_ADD],
    [
      actions.addS3SFTPImportSourceTypeSuccess,
      S3SFTP_IMPORT_SOURCE_TYPE_ADD_SUCCESS,
    ],
    [actions.saveDBConfig, DB_CONFIG_SAVE],
    [actions.saveDBConfigSuccess, DB_CONFIG_SAVE_SUCCESS],
    [actions.saveDBConfigError, DB_CONFIG_SAVE_ERROR],
    [actions.dbMessageClean, DB_MESSAGE_CLEAN],
    [actions.testDBConfigSuccess, DB_CONFIG_TEST_SUCCESS],
    [actions.testDBConfig, DB_CONFIG_TEST],
    [actions.testDBConfigError, DB_CONFIG_TEST_ERROR],
    [
      actions.addDataBaseConfigureFormatSuccess,
      DATABASE_CONFIGURE_FORMAT_ADD_SUCCESS,
    ],
    [actions.showDBConfig, DB_CONFIG_SHOW],
    [actions.showDBConfigSuccess, DB_CONFIG_SHOW_SUCCESS],
    [actions.showDBConfigError, DB_CONFIG_SHOW_ERROR],
    [actions.editDBConfig, DB_CONFIG_EDIT],
    [actions.editDBConfigSuccess, DB_CONFIG_EDIT_SUCCESS],
    [actions.editDBConfigError, DB_CONFIG_EDIT_ERROR],
    [actions.editDBConfigClearError, DB_CONFIG_CLEAR_EDIT_ERROR],
    [actions.dBConfigClearShowError, DB_CONFIG_CLEAR_SHOW_ERROR],
    [actions.dBConfigClearTestError, DB_CONFIG_CLEAR_TEST_ERROR],
    [actions.getDbConnectionList, GET_DB_CONNECTION_LIST],
    [actions.getDbConnectionListSuccess, GET_DB_CONNECTION_LIST_SUCCESS],
    [actions.getDbConnectionDropdownList, GET_DB_CONNECTION_DROPDOWN_LIST],
    [
      actions.getDbConnectionDropdownListSuccess,
      GET_DB_CONNECTION_DROPDOWN_LIST_SUCCESS,
    ],
    [actions.getTablePreview, GET_TABLE_PREVIEW],
    [actions.getTablePreviewSuccess, GET_TABLE_PREVIEW_SUCCESS],
    [actions.getTablePreviewError, GET_TABLE_PREVIEW_ERROR],
    [actions.clearTablePreview, CLEAR_TABLE_PREVIEW],
    [actions.getImportSchedulerList, GET_IMPORT_SCHEDULER_LIST],
    [actions.getImportSchedulerListSuccess, GET_IMPORT_SCHEDULER_LIST_SUCCESS],
    [actions.getImportSchedulerById, GET_IMPORT_SCHEDULER_BY_ID],
    [actions.deleteDbConnection, DB_CONNECTION_DELETE],
    [actions.deleteDbConnectionSuccess, DB_CONNECTION_DELETE_SUCCESS],
    [actions.deleteDbConnectionError, DB_CONNECTION_DELETE_ERROR],
    [actions.deleteDbConnectionClean, DB_CONNECTION_DELETE_CLEAN],
    [actions.getImportSchedulerDetail, GET_IMPORT_SCHEDULER_DETAIL],
    [
      actions.getImportSchedulerDetailSuccess,
      GET_IMPORT_SCHEDULER_DETAIL_SUCCESS,
    ],
    [actions.getImportSchedulerDetailError, GET_IMPORT_SCHEDULER_DETAIL_ERROR],
    [actions.clearImportSchedulerDetail, CLEAR_GET_IMPORT_SCHEDULER_DETAIL],
    [actions.saveDBImport, DB_IMPORT_SAVE],
    [actions.getImportSchedulerByIdSuccess, GET_IMPORT_SCHEDULER_BY_ID_SUCCESS],
    [actions.addUpdateS3SFTPImportSuccess, ADD_UPDATE_S3SFTP_DB_IMPORT_SUCCESS],
    [actions.addUpdateS3SFTPImportError, ADD_UPDATE_S3SFTP_DB_IMPORT_ERROR],
    [actions.showImportList, SHOW_IMPORT_LIST],
    [actions.showImportListSuccess, SHOW_IMPORT_LIST_SUCCESS],
    [actions.showImportListError, SHOW_IMPORT_LIST_ERROR],
    [actions.deleteImportSuccess, DELETE_IMPORT_SUCCESS],
    [actions.deleteImportError, DELETE_IMPORT_ERROR],
  ])('should create %p action', (actionCreator, expectedType) => {
    expect(actionCreator(item)).toEqual({
      type: expectedType,
      payload: item,
    });
  });

  it.each([
    [
      actions.addUpdateS3SFTPImportErrorCleanUp,
      ADD_UPDATE_S3SFTP_DB_IMPORT_ERROR_CLEAN_UP,
    ],
  ])('should create &p action', (actionCreator, expectedType) => {
    expect(actionCreator()).toEqual({
      type: expectedType,
    });
  });
});
